package com.example.demo.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/store")
public class FileStorageController {
	
	private static final String STORE_DIR = "file_store";
    private static final Map<String, String> fileHashes = new HashMap<>();

    public FileStorageController() throws IOException {
        Files.createDirectories(Paths.get(STORE_DIR));
        Path storeDirPath = Paths.get(STORE_DIR);
	    if (!Files.exists(storeDirPath)) {
	        Files.createDirectories(storeDirPath);  // Create the directory if it doesn't exist
	    }
    }

    @PostMapping("/add")
    public ResponseEntity<String> addFile(@RequestParam("file") MultipartFile file) throws IOException {
    	System.out.println("Hii");
    	Path storeDirPath = Paths.get(STORE_DIR);
	    if (!Files.exists(storeDirPath)) {
	        Files.createDirectories(storeDirPath);  // Create the directory if it doesn't exist
	    }
        String filename = file.getOriginalFilename();
        if (filename == null || fileHashes.containsKey(filename)) {
            return new ResponseEntity<>("File already exists", HttpStatus.CONFLICT);
        }

        try {
            String hash = Arrays.toString(file.getBytes());
            if (!fileHashes.containsValue(hash)) {
                file.transferTo(new File(STORE_DIR, filename));
                fileHashes.put(filename, hash);
            }
            return new ResponseEntity<>("File added successfully", HttpStatus.CREATED);
        } catch (IOException e) {
            return new ResponseEntity<>("Failed to add file", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/ls")
    public ResponseEntity<List<String>> listFiles() {
        File dir = new File(STORE_DIR);
        String[] files = dir.list();
        return new ResponseEntity<>(files != null ? Arrays.asList(files) : Collections.emptyList(), HttpStatus.OK);
    }

    @DeleteMapping("/rm/{filename}")
    public ResponseEntity<String> removeFile(@PathVariable String filename) {
        File file = new File(STORE_DIR, filename);
        if (file.delete()) {
            fileHashes.remove(filename);
            return new ResponseEntity<>("File removed successfully", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("File not found", HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping("/update")
    public ResponseEntity<String> updateFile(@RequestParam("file") MultipartFile file) {
        String filename = file.getOriginalFilename();
        if (filename == null) {
            return new ResponseEntity<>("Invalid file", HttpStatus.BAD_REQUEST);
        }

        try {
            String hash = Arrays.toString(file.getBytes());
            file.transferTo(new File(STORE_DIR, filename));
            fileHashes.put(filename, hash);
            return new ResponseEntity<>("File updated successfully", HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>("Failed to update file", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
